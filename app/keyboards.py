# app/keyboards.py
from __future__ import annotations

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
)

from app.config import get_config
from app.utils.i18n import t
from app.db import get_links


# ===== –Ø–∑—ã–∫–∏ =====

def lang_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤ –¢–ó).
    –ö–æ–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ: set_lang:<code>
    """
    b = InlineKeyboardBuilder()
    row1 = ["ru", "en"]
    row2 = ["hi", "pt", "es"]
    row3 = ["ui", "tr", "in"]
    row4 = ["fr", "ozbek", "de"]

    for code in row1:
        b.button(text=t(f"lang.btn.{code}", lang="ru"), callback_data=f"set_lang:{code}")
    b.adjust(2)

    for code in row2:
        b.button(text=t(f"lang.btn.{code}", lang="ru"), callback_data=f"set_lang:{code}")
    b.adjust(2, 3)

    for code in row3:
        b.button(text=t(f"lang.btn.{code}", lang="ru"), callback_data=f"set_lang:{code}")
    b.adjust(2, 3, 3)

    for code in row4:
        b.button(text=t(f"lang.btn.{code}", lang="ru"), callback_data=f"set_lang:{code}")
    b.adjust(2, 3, 3, 3)

    return b.as_markup()


# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====

def _miniapp_url(lang: str, ref_code: str | None = None) -> str:
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä URL –¥–ª—è –º–∏–Ω–∏-–∞–ø–ø–∞ (+ —è–∑—ã–∫ –∏ —Ä–µ—Ñ).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ WebAppInfo –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è fallback-—Å—Å—ã–ª–æ–∫.
    """
    cfg = get_config()
    base = f"https://{cfg.domain}/" if cfg.domain else "https://example.com/"
    qs = f"?lang={lang}"
    if ref_code:
        qs += f"&ref={ref_code}"
    return base + qs


async def main_menu_keyboard(lang: str, *, ref_code: str | None = None) -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
    [üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (web_app)]
    [üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞]
    [üåê 1win –°–∞–π—Ç] [ü™ô 1winToken]

    –°—Å—ã–ª–∫–∏ —Ç—è–Ω–µ–º –∏–∑ –ë–î (app_settings) —Å fallback –Ω–∞ .env.
    """
    links = await get_links()

    b = InlineKeyboardBuilder()

    # URL –º–∏–Ω–∏-–∞–ø–ø–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    miniapp_url = _miniapp_url(lang, ref_code)

    # –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∏–Ω–∏-–∞–ø–ø –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º WebView Telegram
    b.row(
        InlineKeyboardButton(
            text=t("menu.btn.open_app", lang=lang),
            web_app=WebAppInfo(url=miniapp_url),
        )
    )

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞)
    b.row(
        InlineKeyboardButton(
            text=t("menu.btn.support", lang=lang),
            url=links["support_url"],
        )
    )

    # –î–≤–µ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    b.row(
        InlineKeyboardButton(
            text=t("menu.btn.site", lang=lang),
            url=links["ref_url"],
        ),
        InlineKeyboardButton(
            text=t("menu.btn.token", lang=lang),
            url=links["onewin_tok_url"],
        ),
    )

    return b.as_markup()
